Linked List:
A Linked list is used for storing collections of data. A linked list has the following properties. A linked list is a
linear dynamic data structure. The number of nodes in a list is not fixed and can grow and shrink on demand.
Each node of linked list is made up two items the data and a reference to the next node. The last node has a reference to null.
The entry point into linked list is head of the list. It should be noted that head is not a separate node,
but the reference to first node.

Type declaration for a linked list of integers:
struct ListNode {
int data;
struct ListNode *next;
}


# print the elements inside linked list:
void print(struct ListNode *head) {
struct ListNode *cur = head;
for (cur=head; cur!=NULL; cur = cur->next) {
    printf("%d",cur->data);
    printf("/n");
}
}

# Singly Linked List Insertion
It has three cases
1. Insertion at beginning
2. Insertion at ending
3. Insertion at random

Case - 1
struct ListNode *insertAtBeginning(struct ListNode *head, int data){
struct ListNode *temp;
//create a new temp node.
temp = (struct ListNode *)malloc(sizeof(struct ListNode)); // create unnamed node and pointer.
temp->data = data;
temp->next = NULL;
if(head == NULL) {
head = temp;
head -> next = NULL;
}
else{
temp -> next = head;
head = temp;
}
return head;
}

Case - 2
struct ListNode *insertAtEnd(struct ListNode *head, int data){
temp = (struct ListNode *)malloc(sizeof(struct ListNode))
temp -> data = data;
temp -> next = NULL;
*cur = head;
if (cur == NULL) {
head = temp;
// no nodes are there so there is no need to delete :)
}

else{
// find the end of node in ll.
while(cur->next!=NULL){
cur = cur -> next;
}
cur -> next = temp;
}
}


CASE - 3
struct ListNode *insertAtGivenPosition(struct ListNode *head, struct ListNode *new, int n) {
struct ListNode *pred = head;

if(n<=1){
        new -> next = head;
        return new
    }
// find the n-1 node (predecessor)
while(--n && pred != NULL){
pred = pred -> next;
if(pred == NULL)
return NULL;
new -> next = pred -> next;
pred -> next = new
return head;
}
}

Singly Linked List Deletion:
Case - 1 (Deletion of first node)
void *deleteFirst(struct ListNode **head){
struct ListNode *temp;
if(*head == NULL){
return ;
}
temp = *head;
*head = (*head) -> next;
free (temp)
return;
}

Case - 2 (Deleting the last Node)
void *deleteLastNode(struct ListNode **head){
struct ListNode *temp = NULL;
struct ListNode *current = *head;
if(*head == NULL){
return ;
}
while(current -> next){
temp = current;
current = current-> next;
}
temp -> next =  NULL;
free(current)
return;
}

Case - 3 (Deleting at any Position)
void deleteNode(Node** head_ref, int position){
// check for the head null or not if null return it

// if head needs to be removed
if (position == 0){
//change head
head_ref = temp -> next;
// free old head
free(temp);

// Find previous node of the node to be deleted
for (int i = 0; temp != NULL && i < position - 2; i++)
    temp = temp->next;

// If position is more than number of nodes
if (temp == NULL || temp->next == NULL)
    return;

Node* next = temp->next->next;

free(temp->next); // Free memory

temp->next = next;

}
}
